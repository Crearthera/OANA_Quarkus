/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.oana.storage.tables.Exercises;
import org.oana.storage.tables.interfaces.IExercises;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "exercises",
    schema = "public"
)
public class ExercisesRecord extends UpdatableRecordImpl<ExercisesRecord> implements IExercises {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.exercises.id</code>.
     */
    @Override
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.exercises.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false)
    @Override
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.exercises.created_at</code>.
     */
    @Override
    public void setCreatedAt(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.exercises.created_at</code>.
     */
    @Column(name = "created_at", nullable = false, precision = 6)
    @Override
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>public.exercises.updated_at</code>.
     */
    @Override
    public void setUpdatedAt(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.exercises.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    @Override
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.exercises.description</code>.
     */
    @Override
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.exercises.description</code>.
     */
    @Column(name = "description", nullable = false)
    @NotNull
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.exercises.objectives</code>.
     */
    @Override
    public void setObjectives(String[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.exercises.objectives</code>.
     */
    @Column(name = "objectives", nullable = false)
    @NotNull
    @Override
    public String[] getObjectives() {
        return (String[]) get(4);
    }

    /**
     * Setter for <code>public.exercises.materials</code>.
     */
    @Override
    public void setMaterials(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.exercises.materials</code>.
     */
    @Column(name = "materials")
    @Override
    public String getMaterials() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.exercises.duration</code>.
     */
    @Override
    public void setDuration(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.exercises.duration</code>.
     */
    @Column(name = "duration")
    @Override
    public Long getDuration() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.exercises.difficulty_id</code>.
     */
    @Override
    public void setDifficultyId(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.exercises.difficulty_id</code>.
     */
    @Column(name = "difficulty_id")
    @Override
    public Long getDifficultyId() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>public.exercises.rate</code>.
     */
    @Override
    public void setRate(BigDecimal value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.exercises.rate</code>.
     */
    @Column(name = "rate")
    @Override
    public BigDecimal getRate() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>public.exercises.is_premium</code>.
     */
    @Override
    public void setIsPremium(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.exercises.is_premium</code>.
     */
    @Column(name = "is_premium", nullable = false)
    @Override
    public Boolean getIsPremium() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.exercises.therapist_id</code>.
     */
    @Override
    public void setTherapistId(UUID value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.exercises.therapist_id</code>.
     */
    @Column(name = "therapist_id", nullable = false)
    @NotNull
    @Override
    public UUID getTherapistId() {
        return (UUID) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IExercises from) {
        setId(from.getId());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
        setDescription(from.getDescription());
        setObjectives(from.getObjectives());
        setMaterials(from.getMaterials());
        setDuration(from.getDuration());
        setDifficultyId(from.getDifficultyId());
        setRate(from.getRate());
        setIsPremium(from.getIsPremium());
        setTherapistId(from.getTherapistId());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IExercises> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExercisesRecord
     */
    public ExercisesRecord() {
        super(Exercises.EXERCISES);
    }

    /**
     * Create a detached, initialised ExercisesRecord
     */
    public ExercisesRecord(UUID id, OffsetDateTime createdAt, OffsetDateTime updatedAt, String description, String[] objectives, String materials, Long duration, Long difficultyId, BigDecimal rate, Boolean isPremium, UUID therapistId) {
        super(Exercises.EXERCISES);

        setId(id);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setDescription(description);
        setObjectives(objectives);
        setMaterials(materials);
        setDuration(duration);
        setDifficultyId(difficultyId);
        setRate(rate);
        setIsPremium(isPremium);
        setTherapistId(therapistId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ExercisesRecord
     */
    public ExercisesRecord(org.oana.storage.tables.pojos.Exercises value) {
        super(Exercises.EXERCISES);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setDescription(value.getDescription());
            setObjectives(value.getObjectives());
            setMaterials(value.getMaterials());
            setDuration(value.getDuration());
            setDifficultyId(value.getDifficultyId());
            setRate(value.getRate());
            setIsPremium(value.getIsPremium());
            setTherapistId(value.getTherapistId());
            resetChangedOnNotNull();
        }
    }
}
