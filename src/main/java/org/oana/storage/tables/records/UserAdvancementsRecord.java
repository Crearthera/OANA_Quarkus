/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.oana.storage.tables.UserAdvancements;
import org.oana.storage.tables.interfaces.IUserAdvancements;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_advancements",
    schema = "public"
)
public class UserAdvancementsRecord extends UpdatableRecordImpl<UserAdvancementsRecord> implements IUserAdvancements {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_advancements.id</code>.
     */
    @Override
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_advancements.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false)
    @NotNull
    @Override
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_advancements.created_at</code>.
     */
    @Override
    public void setCreatedAt(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_advancements.created_at</code>.
     */
    @Column(name = "created_at", nullable = false, precision = 6)
    @Override
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>public.user_advancements.started_at</code>.
     */
    @Override
    public void setStartedAt(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_advancements.started_at</code>.
     */
    @Column(name = "started_at", precision = 6)
    @Override
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.user_advancements.exercise_id</code>.
     */
    @Override
    public void setExerciseId(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.user_advancements.exercise_id</code>.
     */
    @Column(name = "exercise_id", nullable = false)
    @NotNull
    @Override
    public UUID getExerciseId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.user_advancements.completed_at</code>.
     */
    @Override
    public void setCompletedAt(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.user_advancements.completed_at</code>.
     */
    @Column(name = "completed_at", precision = 6)
    @Override
    public OffsetDateTime getCompletedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.user_advancements.sequence_number</code>.
     */
    @Override
    public void setSequenceNumber(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.user_advancements.sequence_number</code>.
     */
    @Column(name = "sequence_number", nullable = false)
    @Override
    public Long getSequenceNumber() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserAdvancements from) {
        setId(from.getId());
        setCreatedAt(from.getCreatedAt());
        setStartedAt(from.getStartedAt());
        setExerciseId(from.getExerciseId());
        setCompletedAt(from.getCompletedAt());
        setSequenceNumber(from.getSequenceNumber());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IUserAdvancements> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserAdvancementsRecord
     */
    public UserAdvancementsRecord() {
        super(UserAdvancements.USER_ADVANCEMENTS);
    }

    /**
     * Create a detached, initialised UserAdvancementsRecord
     */
    public UserAdvancementsRecord(UUID id, OffsetDateTime createdAt, OffsetDateTime startedAt, UUID exerciseId, OffsetDateTime completedAt, Long sequenceNumber) {
        super(UserAdvancements.USER_ADVANCEMENTS);

        setId(id);
        setCreatedAt(createdAt);
        setStartedAt(startedAt);
        setExerciseId(exerciseId);
        setCompletedAt(completedAt);
        setSequenceNumber(sequenceNumber);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserAdvancementsRecord
     */
    public UserAdvancementsRecord(org.oana.storage.tables.pojos.UserAdvancements value) {
        super(UserAdvancements.USER_ADVANCEMENTS);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setStartedAt(value.getStartedAt());
            setExerciseId(value.getExerciseId());
            setCompletedAt(value.getCompletedAt());
            setSequenceNumber(value.getSequenceNumber());
            resetChangedOnNotNull();
        }
    }
}
