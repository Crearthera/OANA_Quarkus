/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.oana.storage.tables.UserType;
import org.oana.storage.tables.interfaces.IUserType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_type",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "user_type_user_type_key", columnNames = { "user_type" })
    }
)
public class UserTypeRecord extends UpdatableRecordImpl<UserTypeRecord> implements IUserType {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_type.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_type.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.user_type.user_type</code>.
     */
    @Override
    public void setUserType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_type.user_type</code>.
     */
    @Column(name = "user_type", nullable = false)
    @NotNull
    @Override
    public String getUserType() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserType from) {
        setId(from.getId());
        setUserType(from.getUserType());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IUserType> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserTypeRecord
     */
    public UserTypeRecord() {
        super(UserType.USER_TYPE);
    }

    /**
     * Create a detached, initialised UserTypeRecord
     */
    public UserTypeRecord(Long id, String userType) {
        super(UserType.USER_TYPE);

        setId(id);
        setUserType(userType);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserTypeRecord
     */
    public UserTypeRecord(org.oana.storage.tables.pojos.UserType value) {
        super(UserType.USER_TYPE);

        if (value != null) {
            setId(value.getId());
            setUserType(value.getUserType());
            resetChangedOnNotNull();
        }
    }
}
