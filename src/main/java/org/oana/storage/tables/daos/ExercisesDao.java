/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.Exercises;
import org.oana.storage.tables.records.ExercisesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExercisesDao extends DAOImpl<ExercisesRecord, org.oana.storage.tables.pojos.Exercises, UUID> {

    /**
     * Create a new ExercisesDao without any configuration
     */
    public ExercisesDao() {
        super(Exercises.EXERCISES, org.oana.storage.tables.pojos.Exercises.class);
    }

    /**
     * Create a new ExercisesDao with an attached configuration
     */
    public ExercisesDao(Configuration configuration) {
        super(Exercises.EXERCISES, org.oana.storage.tables.pojos.Exercises.class, configuration);
    }

    @Override
    public UUID getId(org.oana.storage.tables.pojos.Exercises object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Exercises.EXERCISES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchById(UUID... values) {
        return fetch(Exercises.EXERCISES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.oana.storage.tables.pojos.Exercises fetchOneById(UUID value) {
        return fetchOne(Exercises.EXERCISES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.Exercises> fetchOptionalById(UUID value) {
        return fetchOptional(Exercises.EXERCISES.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Exercises.EXERCISES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(Exercises.EXERCISES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Exercises.EXERCISES.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByUpdatedAt(OffsetDateTime... values) {
        return fetch(Exercises.EXERCISES.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Exercises.EXERCISES.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByDescription(String... values) {
        return fetch(Exercises.EXERCISES.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>objectives BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfObjectives(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(Exercises.EXERCISES.OBJECTIVES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>objectives IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByObjectives(String[]... values) {
        return fetch(Exercises.EXERCISES.OBJECTIVES, values);
    }

    /**
     * Fetch records that have <code>materials BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfMaterials(String lowerInclusive, String upperInclusive) {
        return fetchRange(Exercises.EXERCISES.MATERIALS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>materials IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByMaterials(String... values) {
        return fetch(Exercises.EXERCISES.MATERIALS, values);
    }

    /**
     * Fetch records that have <code>duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfDuration(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Exercises.EXERCISES.DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>duration IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByDuration(Long... values) {
        return fetch(Exercises.EXERCISES.DURATION, values);
    }

    /**
     * Fetch records that have <code>difficulty_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfDifficultyId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Exercises.EXERCISES.DIFFICULTY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>difficulty_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByDifficultyId(Long... values) {
        return fetch(Exercises.EXERCISES.DIFFICULTY_ID, values);
    }

    /**
     * Fetch records that have <code>rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfRate(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Exercises.EXERCISES.RATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rate IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByRate(BigDecimal... values) {
        return fetch(Exercises.EXERCISES.RATE, values);
    }

    /**
     * Fetch records that have <code>is_premium BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfIsPremium(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Exercises.EXERCISES.IS_PREMIUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_premium IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByIsPremium(Boolean... values) {
        return fetch(Exercises.EXERCISES.IS_PREMIUM, values);
    }

    /**
     * Fetch records that have <code>therapist_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchRangeOfTherapistId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Exercises.EXERCISES.THERAPIST_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>therapist_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.Exercises> fetchByTherapistId(UUID... values) {
        return fetch(Exercises.EXERCISES.THERAPIST_ID, values);
    }
}
