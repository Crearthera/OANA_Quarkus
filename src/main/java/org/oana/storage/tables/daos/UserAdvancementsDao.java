/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.UserAdvancements;
import org.oana.storage.tables.records.UserAdvancementsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAdvancementsDao extends DAOImpl<UserAdvancementsRecord, org.oana.storage.tables.pojos.UserAdvancements, UUID> {

    /**
     * Create a new UserAdvancementsDao without any configuration
     */
    public UserAdvancementsDao() {
        super(UserAdvancements.USER_ADVANCEMENTS, org.oana.storage.tables.pojos.UserAdvancements.class);
    }

    /**
     * Create a new UserAdvancementsDao with an attached configuration
     */
    public UserAdvancementsDao(Configuration configuration) {
        super(UserAdvancements.USER_ADVANCEMENTS, org.oana.storage.tables.pojos.UserAdvancements.class, configuration);
    }

    @Override
    public UUID getId(org.oana.storage.tables.pojos.UserAdvancements object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchById(UUID... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.oana.storage.tables.pojos.UserAdvancements fetchOneById(UUID value) {
        return fetchOne(UserAdvancements.USER_ADVANCEMENTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.UserAdvancements> fetchOptionalById(UUID value) {
        return fetchOptional(UserAdvancements.USER_ADVANCEMENTS.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfStartedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchByStartedAt(OffsetDateTime... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>exercise_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfExerciseId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.EXERCISE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>exercise_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchByExerciseId(UUID... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.EXERCISE_ID, values);
    }

    /**
     * Fetch records that have <code>completed_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfCompletedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.COMPLETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>completed_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchByCompletedAt(OffsetDateTime... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.COMPLETED_AT, values);
    }

    /**
     * Fetch records that have <code>sequence_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchRangeOfSequenceNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAdvancements.USER_ADVANCEMENTS.SEQUENCE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sequence_number IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAdvancements> fetchBySequenceNumber(Long... values) {
        return fetch(UserAdvancements.USER_ADVANCEMENTS.SEQUENCE_NUMBER, values);
    }
}
