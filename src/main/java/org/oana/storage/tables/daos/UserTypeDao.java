/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.UserType;
import org.oana.storage.tables.records.UserTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserTypeDao extends DAOImpl<UserTypeRecord, org.oana.storage.tables.pojos.UserType, Long> {

    /**
     * Create a new UserTypeDao without any configuration
     */
    public UserTypeDao() {
        super(UserType.USER_TYPE, org.oana.storage.tables.pojos.UserType.class);
    }

    /**
     * Create a new UserTypeDao with an attached configuration
     */
    public UserTypeDao(Configuration configuration) {
        super(UserType.USER_TYPE, org.oana.storage.tables.pojos.UserType.class, configuration);
    }

    @Override
    public Long getId(org.oana.storage.tables.pojos.UserType object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserType> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserType.USER_TYPE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserType> fetchById(Long... values) {
        return fetch(UserType.USER_TYPE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.oana.storage.tables.pojos.UserType fetchOneById(Long value) {
        return fetchOne(UserType.USER_TYPE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.UserType> fetchOptionalById(Long value) {
        return fetchOptional(UserType.USER_TYPE.ID, value);
    }

    /**
     * Fetch records that have <code>user_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserType> fetchRangeOfUserType(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserType.USER_TYPE.USER_TYPE_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_type IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserType> fetchByUserType(String... values) {
        return fetch(UserType.USER_TYPE.USER_TYPE_, values);
    }

    /**
     * Fetch a unique record that has <code>user_type = value</code>
     */
    public org.oana.storage.tables.pojos.UserType fetchOneByUserType(String value) {
        return fetchOne(UserType.USER_TYPE.USER_TYPE_, value);
    }

    /**
     * Fetch a unique record that has <code>user_type = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.UserType> fetchOptionalByUserType(String value) {
        return fetchOptional(UserType.USER_TYPE.USER_TYPE_, value);
    }
}
