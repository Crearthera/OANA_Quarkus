/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.ExerciseTags;
import org.oana.storage.tables.records.ExerciseTagsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExerciseTagsDao extends DAOImpl<ExerciseTagsRecord, org.oana.storage.tables.pojos.ExerciseTags, UUID> {

    /**
     * Create a new ExerciseTagsDao without any configuration
     */
    public ExerciseTagsDao() {
        super(ExerciseTags.EXERCISE_TAGS, org.oana.storage.tables.pojos.ExerciseTags.class);
    }

    /**
     * Create a new ExerciseTagsDao with an attached configuration
     */
    public ExerciseTagsDao(Configuration configuration) {
        super(ExerciseTags.EXERCISE_TAGS, org.oana.storage.tables.pojos.ExerciseTags.class, configuration);
    }

    @Override
    public UUID getId(org.oana.storage.tables.pojos.ExerciseTags object) {
        return object.getExerciseId();
    }

    /**
     * Fetch records that have <code>exercise_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchRangeOfExerciseId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ExerciseTags.EXERCISE_TAGS.EXERCISE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>exercise_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchByExerciseId(UUID... values) {
        return fetch(ExerciseTags.EXERCISE_TAGS.EXERCISE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>exercise_id = value</code>
     */
    public org.oana.storage.tables.pojos.ExerciseTags fetchOneByExerciseId(UUID value) {
        return fetchOne(ExerciseTags.EXERCISE_TAGS.EXERCISE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>exercise_id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.ExerciseTags> fetchOptionalByExerciseId(UUID value) {
        return fetchOptional(ExerciseTags.EXERCISE_TAGS.EXERCISE_ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(ExerciseTags.EXERCISE_TAGS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(ExerciseTags.EXERCISE_TAGS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchRangeOfTagId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ExerciseTags.EXERCISE_TAGS.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseTags> fetchByTagId(Long... values) {
        return fetch(ExerciseTags.EXERCISE_TAGS.TAG_ID, values);
    }
}
