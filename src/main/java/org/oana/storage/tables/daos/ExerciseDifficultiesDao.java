/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.ExerciseDifficulties;
import org.oana.storage.tables.records.ExerciseDifficultiesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExerciseDifficultiesDao extends DAOImpl<ExerciseDifficultiesRecord, org.oana.storage.tables.pojos.ExerciseDifficulties, Long> {

    /**
     * Create a new ExerciseDifficultiesDao without any configuration
     */
    public ExerciseDifficultiesDao() {
        super(ExerciseDifficulties.EXERCISE_DIFFICULTIES, org.oana.storage.tables.pojos.ExerciseDifficulties.class);
    }

    /**
     * Create a new ExerciseDifficultiesDao with an attached configuration
     */
    public ExerciseDifficultiesDao(Configuration configuration) {
        super(ExerciseDifficulties.EXERCISE_DIFFICULTIES, org.oana.storage.tables.pojos.ExerciseDifficulties.class, configuration);
    }

    @Override
    public Long getId(org.oana.storage.tables.pojos.ExerciseDifficulties object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ExerciseDifficulties.EXERCISE_DIFFICULTIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchById(Long... values) {
        return fetch(ExerciseDifficulties.EXERCISE_DIFFICULTIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.oana.storage.tables.pojos.ExerciseDifficulties fetchOneById(Long value) {
        return fetchOne(ExerciseDifficulties.EXERCISE_DIFFICULTIES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchOptionalById(Long value) {
        return fetchOptional(ExerciseDifficulties.EXERCISE_DIFFICULTIES.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(ExerciseDifficulties.EXERCISE_DIFFICULTIES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(ExerciseDifficulties.EXERCISE_DIFFICULTIES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ExerciseDifficulties.EXERCISE_DIFFICULTIES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.ExerciseDifficulties> fetchByName(String... values) {
        return fetch(ExerciseDifficulties.EXERCISE_DIFFICULTIES.NAME, values);
    }
}
