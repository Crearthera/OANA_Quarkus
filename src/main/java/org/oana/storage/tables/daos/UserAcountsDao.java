/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.oana.storage.tables.UserAcounts;
import org.oana.storage.tables.records.UserAcountsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAcountsDao extends DAOImpl<UserAcountsRecord, org.oana.storage.tables.pojos.UserAcounts, UUID> {

    /**
     * Create a new UserAcountsDao without any configuration
     */
    public UserAcountsDao() {
        super(UserAcounts.USER_ACOUNTS, org.oana.storage.tables.pojos.UserAcounts.class);
    }

    /**
     * Create a new UserAcountsDao with an attached configuration
     */
    public UserAcountsDao(Configuration configuration) {
        super(UserAcounts.USER_ACOUNTS, org.oana.storage.tables.pojos.UserAcounts.class, configuration);
    }

    @Override
    public UUID getId(org.oana.storage.tables.pojos.UserAcounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserAcounts.USER_ACOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchById(UUID... values) {
        return fetch(UserAcounts.USER_ACOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.oana.storage.tables.pojos.UserAcounts fetchOneById(UUID value) {
        return fetchOne(UserAcounts.USER_ACOUNTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.oana.storage.tables.pojos.UserAcounts> fetchOptionalById(UUID value) {
        return fetchOptional(UserAcounts.USER_ACOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>provider_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchRangeOfProviderId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserAcounts.USER_ACOUNTS.PROVIDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchByProviderId(UUID... values) {
        return fetch(UserAcounts.USER_ACOUNTS.PROVIDER_ID, values);
    }

    /**
     * Fetch records that have <code>created_ad BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchRangeOfCreatedAd(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserAcounts.USER_ACOUNTS.CREATED_AD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_ad IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchByCreatedAd(LocalDateTime... values) {
        return fetch(UserAcounts.USER_ACOUNTS.CREATED_AD, values);
    }

    /**
     * Fetch records that have <code>user_type_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchRangeOfUserTypeId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAcounts.USER_ACOUNTS.USER_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_type_id IN (values)</code>
     */
    public List<org.oana.storage.tables.pojos.UserAcounts> fetchByUserTypeId(Long... values) {
        return fetch(UserAcounts.USER_ACOUNTS.USER_TYPE_ID, values);
    }
}
