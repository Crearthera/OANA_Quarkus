/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oana.storage.Keys;
import org.oana.storage.Public;
import org.oana.storage.tables.ExerciseDifficulties.ExerciseDifficultiesPath;
import org.oana.storage.tables.ExerciseTags.ExerciseTagsPath;
import org.oana.storage.tables.UserAcounts.UserAcountsPath;
import org.oana.storage.tables.UserAdvancements.UserAdvancementsPath;
import org.oana.storage.tables.records.ExercisesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Exercises extends TableImpl<ExercisesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.exercises</code>
     */
    public static final Exercises EXERCISES = new Exercises();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExercisesRecord> getRecordType() {
        return ExercisesRecord.class;
    }

    /**
     * The column <code>public.exercises.id</code>.
     */
    public final TableField<ExercisesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.exercises.created_at</code>.
     */
    public final TableField<ExercisesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.exercises.updated_at</code>.
     */
    public final TableField<ExercisesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.exercises.description</code>.
     */
    public final TableField<ExercisesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.exercises.objectives</code>.
     */
    public final TableField<ExercisesRecord, String[]> OBJECTIVES = createField(DSL.name("objectives"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>public.exercises.materials</code>.
     */
    public final TableField<ExercisesRecord, String> MATERIALS = createField(DSL.name("materials"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.exercises.duration</code>.
     */
    public final TableField<ExercisesRecord, Long> DURATION = createField(DSL.name("duration"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.exercises.difficulty_id</code>.
     */
    public final TableField<ExercisesRecord, Long> DIFFICULTY_ID = createField(DSL.name("difficulty_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.exercises.rate</code>.
     */
    public final TableField<ExercisesRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.exercises.is_premium</code>.
     */
    public final TableField<ExercisesRecord, Boolean> IS_PREMIUM = createField(DSL.name("is_premium"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.exercises.therapist_id</code>.
     */
    public final TableField<ExercisesRecord, UUID> THERAPIST_ID = createField(DSL.name("therapist_id"), SQLDataType.UUID.nullable(false), this, "");

    private Exercises(Name alias, Table<ExercisesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Exercises(Name alias, Table<ExercisesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.exercises</code> table reference
     */
    public Exercises(String alias) {
        this(DSL.name(alias), EXERCISES);
    }

    /**
     * Create an aliased <code>public.exercises</code> table reference
     */
    public Exercises(Name alias) {
        this(alias, EXERCISES);
    }

    /**
     * Create a <code>public.exercises</code> table reference
     */
    public Exercises() {
        this(DSL.name("exercises"), null);
    }

    public <O extends Record> Exercises(Table<O> path, ForeignKey<O, ExercisesRecord> childPath, InverseForeignKey<O, ExercisesRecord> parentPath) {
        super(path, childPath, parentPath, EXERCISES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExercisesPath extends Exercises implements Path<ExercisesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExercisesPath(Table<O> path, ForeignKey<O, ExercisesRecord> childPath, InverseForeignKey<O, ExercisesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExercisesPath(Name alias, Table<ExercisesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExercisesPath as(String alias) {
            return new ExercisesPath(DSL.name(alias), this);
        }

        @Override
        public ExercisesPath as(Name alias) {
            return new ExercisesPath(alias, this);
        }

        @Override
        public ExercisesPath as(Table<?> alias) {
            return new ExercisesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExercisesRecord> getPrimaryKey() {
        return Keys.EXERCISES_PKEY;
    }

    @Override
    public List<ForeignKey<ExercisesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXERCISES__EXERCISES_DIFFICULTY_ID_FKEY, Keys.EXERCISES__EXERCISES_THERAPIST_ID_FKEY);
    }

    private transient ExerciseDifficultiesPath _exerciseDifficulties;

    /**
     * Get the implicit join path to the
     * <code>public.exercise_difficulties</code> table.
     */
    public ExerciseDifficultiesPath exerciseDifficulties() {
        if (_exerciseDifficulties == null)
            _exerciseDifficulties = new ExerciseDifficultiesPath(this, Keys.EXERCISES__EXERCISES_DIFFICULTY_ID_FKEY, null);

        return _exerciseDifficulties;
    }

    private transient UserAcountsPath _userAcounts;

    /**
     * Get the implicit join path to the <code>public.user_acounts</code> table.
     */
    public UserAcountsPath userAcounts() {
        if (_userAcounts == null)
            _userAcounts = new UserAcountsPath(this, Keys.EXERCISES__EXERCISES_THERAPIST_ID_FKEY, null);

        return _userAcounts;
    }

    private transient ExerciseTagsPath _exerciseTags;

    /**
     * Get the implicit to-many join path to the
     * <code>public.exercise_tags</code> table
     */
    public ExerciseTagsPath exerciseTags() {
        if (_exerciseTags == null)
            _exerciseTags = new ExerciseTagsPath(this, null, Keys.EXERCISE_TAGS__EXERCISE_TAGS_EXERCISE_ID_FKEY.getInverseKey());

        return _exerciseTags;
    }

    private transient UserAdvancementsPath _userAdvancements;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_advancements</code> table
     */
    public UserAdvancementsPath userAdvancements() {
        if (_userAdvancements == null)
            _userAdvancements = new UserAdvancementsPath(this, null, Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_EXERCISE_ID_FKEY.getInverseKey());

        return _userAdvancements;
    }

    @Override
    public Exercises as(String alias) {
        return new Exercises(DSL.name(alias), this);
    }

    @Override
    public Exercises as(Name alias) {
        return new Exercises(alias, this);
    }

    @Override
    public Exercises as(Table<?> alias) {
        return new Exercises(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercises rename(String name) {
        return new Exercises(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercises rename(Name name) {
        return new Exercises(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercises rename(Table<?> name) {
        return new Exercises(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises where(Condition condition) {
        return new Exercises(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercises where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercises where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercises where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercises where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercises whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
