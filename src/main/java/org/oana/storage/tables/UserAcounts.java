/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oana.storage.Keys;
import org.oana.storage.Public;
import org.oana.storage.tables.Exercises.ExercisesPath;
import org.oana.storage.tables.UserAdvancements.UserAdvancementsPath;
import org.oana.storage.tables.UserType.UserTypePath;
import org.oana.storage.tables.records.UserAcountsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAcounts extends TableImpl<UserAcountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_acounts</code>
     */
    public static final UserAcounts USER_ACOUNTS = new UserAcounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAcountsRecord> getRecordType() {
        return UserAcountsRecord.class;
    }

    /**
     * The column <code>public.user_acounts.id</code>.
     */
    public final TableField<UserAcountsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user_acounts.provider_id</code>.
     */
    public final TableField<UserAcountsRecord, UUID> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_acounts.created_ad</code>.
     */
    public final TableField<UserAcountsRecord, LocalDateTime> CREATED_AD = createField(DSL.name("created_ad"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user_acounts.user_type_id</code>.
     */
    public final TableField<UserAcountsRecord, Long> USER_TYPE_ID = createField(DSL.name("user_type_id"), SQLDataType.BIGINT, this, "");

    private UserAcounts(Name alias, Table<UserAcountsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserAcounts(Name alias, Table<UserAcountsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_acounts</code> table reference
     */
    public UserAcounts(String alias) {
        this(DSL.name(alias), USER_ACOUNTS);
    }

    /**
     * Create an aliased <code>public.user_acounts</code> table reference
     */
    public UserAcounts(Name alias) {
        this(alias, USER_ACOUNTS);
    }

    /**
     * Create a <code>public.user_acounts</code> table reference
     */
    public UserAcounts() {
        this(DSL.name("user_acounts"), null);
    }

    public <O extends Record> UserAcounts(Table<O> path, ForeignKey<O, UserAcountsRecord> childPath, InverseForeignKey<O, UserAcountsRecord> parentPath) {
        super(path, childPath, parentPath, USER_ACOUNTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserAcountsPath extends UserAcounts implements Path<UserAcountsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserAcountsPath(Table<O> path, ForeignKey<O, UserAcountsRecord> childPath, InverseForeignKey<O, UserAcountsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserAcountsPath(Name alias, Table<UserAcountsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserAcountsPath as(String alias) {
            return new UserAcountsPath(DSL.name(alias), this);
        }

        @Override
        public UserAcountsPath as(Name alias) {
            return new UserAcountsPath(alias, this);
        }

        @Override
        public UserAcountsPath as(Table<?> alias) {
            return new UserAcountsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserAcountsRecord> getPrimaryKey() {
        return Keys.USER_ACOUNTS_PKEY;
    }

    @Override
    public List<ForeignKey<UserAcountsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ACOUNTS__USER_ACOUNTS_USER_TYPE_ID_FKEY);
    }

    private transient UserTypePath _userType;

    /**
     * Get the implicit join path to the <code>public.user_type</code> table.
     */
    public UserTypePath userType() {
        if (_userType == null)
            _userType = new UserTypePath(this, Keys.USER_ACOUNTS__USER_ACOUNTS_USER_TYPE_ID_FKEY, null);

        return _userType;
    }

    private transient ExercisesPath _exercises;

    /**
     * Get the implicit to-many join path to the <code>public.exercises</code>
     * table
     */
    public ExercisesPath exercises() {
        if (_exercises == null)
            _exercises = new ExercisesPath(this, null, Keys.EXERCISES__EXERCISES_THERAPIST_ID_FKEY.getInverseKey());

        return _exercises;
    }

    private transient UserAdvancementsPath _userAdvancements;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_advancements</code> table
     */
    public UserAdvancementsPath userAdvancements() {
        if (_userAdvancements == null)
            _userAdvancements = new UserAdvancementsPath(this, null, Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_ID_FKEY.getInverseKey());

        return _userAdvancements;
    }

    @Override
    public UserAcounts as(String alias) {
        return new UserAcounts(DSL.name(alias), this);
    }

    @Override
    public UserAcounts as(Name alias) {
        return new UserAcounts(alias, this);
    }

    @Override
    public UserAcounts as(Table<?> alias) {
        return new UserAcounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAcounts rename(String name) {
        return new UserAcounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAcounts rename(Name name) {
        return new UserAcounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAcounts rename(Table<?> name) {
        return new UserAcounts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts where(Condition condition) {
        return new UserAcounts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAcounts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAcounts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAcounts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAcounts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAcounts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
