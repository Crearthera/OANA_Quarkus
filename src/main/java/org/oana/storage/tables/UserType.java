/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oana.storage.Keys;
import org.oana.storage.Public;
import org.oana.storage.tables.UserAcounts.UserAcountsPath;
import org.oana.storage.tables.records.UserTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserType extends TableImpl<UserTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_type</code>
     */
    public static final UserType USER_TYPE = new UserType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTypeRecord> getRecordType() {
        return UserTypeRecord.class;
    }

    /**
     * The column <code>public.user_type.id</code>.
     */
    public final TableField<UserTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_type.user_type</code>.
     */
    public final TableField<UserTypeRecord, String> USER_TYPE_ = createField(DSL.name("user_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    private UserType(Name alias, Table<UserTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserType(Name alias, Table<UserTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_type</code> table reference
     */
    public UserType(String alias) {
        this(DSL.name(alias), USER_TYPE);
    }

    /**
     * Create an aliased <code>public.user_type</code> table reference
     */
    public UserType(Name alias) {
        this(alias, USER_TYPE);
    }

    /**
     * Create a <code>public.user_type</code> table reference
     */
    public UserType() {
        this(DSL.name("user_type"), null);
    }

    public <O extends Record> UserType(Table<O> path, ForeignKey<O, UserTypeRecord> childPath, InverseForeignKey<O, UserTypeRecord> parentPath) {
        super(path, childPath, parentPath, USER_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserTypePath extends UserType implements Path<UserTypeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserTypePath(Table<O> path, ForeignKey<O, UserTypeRecord> childPath, InverseForeignKey<O, UserTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserTypePath(Name alias, Table<UserTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserTypePath as(String alias) {
            return new UserTypePath(DSL.name(alias), this);
        }

        @Override
        public UserTypePath as(Name alias) {
            return new UserTypePath(alias, this);
        }

        @Override
        public UserTypePath as(Table<?> alias) {
            return new UserTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserTypeRecord, Long> getIdentity() {
        return (Identity<UserTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserTypeRecord> getPrimaryKey() {
        return Keys.USER_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<UserTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_TYPE_USER_TYPE_KEY);
    }

    private transient UserAcountsPath _userAcounts;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_acounts</code> table
     */
    public UserAcountsPath userAcounts() {
        if (_userAcounts == null)
            _userAcounts = new UserAcountsPath(this, null, Keys.USER_ACOUNTS__USER_ACOUNTS_USER_TYPE_ID_FKEY.getInverseKey());

        return _userAcounts;
    }

    @Override
    public UserType as(String alias) {
        return new UserType(DSL.name(alias), this);
    }

    @Override
    public UserType as(Name alias) {
        return new UserType(alias, this);
    }

    @Override
    public UserType as(Table<?> alias) {
        return new UserType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserType rename(String name) {
        return new UserType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserType rename(Name name) {
        return new UserType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserType rename(Table<?> name) {
        return new UserType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType where(Condition condition) {
        return new UserType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
