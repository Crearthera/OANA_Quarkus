/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;

import org.oana.storage.tables.interfaces.IUserType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_type",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "user_type_user_type_key", columnNames = { "user_type" })
    }
)
public class UserType implements IUserType {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String userType;

    public UserType() {}

    public UserType(IUserType value) {
        this.id = value.getId();
        this.userType = value.getUserType();
    }

    public UserType(
        Long id,
        String userType
    ) {
        this.id = id;
        this.userType = userType;
    }

    /**
     * Getter for <code>public.user_type.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.user_type.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.user_type.user_type</code>.
     */
    @Column(name = "user_type", nullable = false)
    @NotNull
    @Override
    public String getUserType() {
        return this.userType;
    }

    /**
     * Setter for <code>public.user_type.user_type</code>.
     */
    @Override
    public void setUserType(String userType) {
        this.userType = userType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserType other = (UserType) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userType == null) {
            if (other.userType != null)
                return false;
        }
        else if (!this.userType.equals(other.userType))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userType == null) ? 0 : this.userType.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserType (");

        sb.append(id);
        sb.append(", ").append(userType);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserType from) {
        setId(from.getId());
        setUserType(from.getUserType());
    }

    @Override
    public <E extends IUserType> E into(E into) {
        into.from(this);
        return into;
    }
}
