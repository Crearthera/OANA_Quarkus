/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oana.storage.Keys;
import org.oana.storage.Public;
import org.oana.storage.tables.Exercises.ExercisesPath;
import org.oana.storage.tables.Tags.TagsPath;
import org.oana.storage.tables.records.ExerciseTagsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExerciseTags extends TableImpl<ExerciseTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.exercise_tags</code>
     */
    public static final ExerciseTags EXERCISE_TAGS = new ExerciseTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExerciseTagsRecord> getRecordType() {
        return ExerciseTagsRecord.class;
    }

    /**
     * The column <code>public.exercise_tags.exercise_id</code>.
     */
    public final TableField<ExerciseTagsRecord, UUID> EXERCISE_ID = createField(DSL.name("exercise_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.exercise_tags.created_at</code>.
     */
    public final TableField<ExerciseTagsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.exercise_tags.tag_id</code>.
     */
    public final TableField<ExerciseTagsRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ExerciseTags(Name alias, Table<ExerciseTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExerciseTags(Name alias, Table<ExerciseTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.exercise_tags</code> table reference
     */
    public ExerciseTags(String alias) {
        this(DSL.name(alias), EXERCISE_TAGS);
    }

    /**
     * Create an aliased <code>public.exercise_tags</code> table reference
     */
    public ExerciseTags(Name alias) {
        this(alias, EXERCISE_TAGS);
    }

    /**
     * Create a <code>public.exercise_tags</code> table reference
     */
    public ExerciseTags() {
        this(DSL.name("exercise_tags"), null);
    }

    public <O extends Record> ExerciseTags(Table<O> path, ForeignKey<O, ExerciseTagsRecord> childPath, InverseForeignKey<O, ExerciseTagsRecord> parentPath) {
        super(path, childPath, parentPath, EXERCISE_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExerciseTagsPath extends ExerciseTags implements Path<ExerciseTagsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExerciseTagsPath(Table<O> path, ForeignKey<O, ExerciseTagsRecord> childPath, InverseForeignKey<O, ExerciseTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExerciseTagsPath(Name alias, Table<ExerciseTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExerciseTagsPath as(String alias) {
            return new ExerciseTagsPath(DSL.name(alias), this);
        }

        @Override
        public ExerciseTagsPath as(Name alias) {
            return new ExerciseTagsPath(alias, this);
        }

        @Override
        public ExerciseTagsPath as(Table<?> alias) {
            return new ExerciseTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExerciseTagsRecord> getPrimaryKey() {
        return Keys.EXERCISE_TAGS_PKEY;
    }

    @Override
    public List<ForeignKey<ExerciseTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXERCISE_TAGS__EXERCISE_TAGS_EXERCISE_ID_FKEY, Keys.EXERCISE_TAGS__EXERCISE_TAGS_TAG_ID_FKEY);
    }

    private transient ExercisesPath _exercises;

    /**
     * Get the implicit join path to the <code>public.exercises</code> table.
     */
    public ExercisesPath exercises() {
        if (_exercises == null)
            _exercises = new ExercisesPath(this, Keys.EXERCISE_TAGS__EXERCISE_TAGS_EXERCISE_ID_FKEY, null);

        return _exercises;
    }

    private transient TagsPath _tags;

    /**
     * Get the implicit join path to the <code>public.tags</code> table.
     */
    public TagsPath tags() {
        if (_tags == null)
            _tags = new TagsPath(this, Keys.EXERCISE_TAGS__EXERCISE_TAGS_TAG_ID_FKEY, null);

        return _tags;
    }

    @Override
    public ExerciseTags as(String alias) {
        return new ExerciseTags(DSL.name(alias), this);
    }

    @Override
    public ExerciseTags as(Name alias) {
        return new ExerciseTags(alias, this);
    }

    @Override
    public ExerciseTags as(Table<?> alias) {
        return new ExerciseTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseTags rename(String name) {
        return new ExerciseTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseTags rename(Name name) {
        return new ExerciseTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseTags rename(Table<?> name) {
        return new ExerciseTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags where(Condition condition) {
        return new ExerciseTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExerciseTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExerciseTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExerciseTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExerciseTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExerciseTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
