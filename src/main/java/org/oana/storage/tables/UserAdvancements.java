/*
 * This file is generated by jOOQ.
 */
package org.oana.storage.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oana.storage.Keys;
import org.oana.storage.Public;
import org.oana.storage.tables.Exercises.ExercisesPath;
import org.oana.storage.tables.UserAcounts.UserAcountsPath;
import org.oana.storage.tables.records.UserAdvancementsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAdvancements extends TableImpl<UserAdvancementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_advancements</code>
     */
    public static final UserAdvancements USER_ADVANCEMENTS = new UserAdvancements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAdvancementsRecord> getRecordType() {
        return UserAdvancementsRecord.class;
    }

    /**
     * The column <code>public.user_advancements.id</code>.
     */
    public final TableField<UserAdvancementsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_advancements.created_at</code>.
     */
    public final TableField<UserAdvancementsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.user_advancements.started_at</code>.
     */
    public final TableField<UserAdvancementsRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user_advancements.exercise_id</code>.
     */
    public final TableField<UserAdvancementsRecord, UUID> EXERCISE_ID = createField(DSL.name("exercise_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_advancements.completed_at</code>.
     */
    public final TableField<UserAdvancementsRecord, OffsetDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user_advancements.sequence_number</code>.
     */
    public final TableField<UserAdvancementsRecord, Long> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private UserAdvancements(Name alias, Table<UserAdvancementsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserAdvancements(Name alias, Table<UserAdvancementsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_advancements</code> table reference
     */
    public UserAdvancements(String alias) {
        this(DSL.name(alias), USER_ADVANCEMENTS);
    }

    /**
     * Create an aliased <code>public.user_advancements</code> table reference
     */
    public UserAdvancements(Name alias) {
        this(alias, USER_ADVANCEMENTS);
    }

    /**
     * Create a <code>public.user_advancements</code> table reference
     */
    public UserAdvancements() {
        this(DSL.name("user_advancements"), null);
    }

    public <O extends Record> UserAdvancements(Table<O> path, ForeignKey<O, UserAdvancementsRecord> childPath, InverseForeignKey<O, UserAdvancementsRecord> parentPath) {
        super(path, childPath, parentPath, USER_ADVANCEMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserAdvancementsPath extends UserAdvancements implements Path<UserAdvancementsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserAdvancementsPath(Table<O> path, ForeignKey<O, UserAdvancementsRecord> childPath, InverseForeignKey<O, UserAdvancementsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserAdvancementsPath(Name alias, Table<UserAdvancementsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserAdvancementsPath as(String alias) {
            return new UserAdvancementsPath(DSL.name(alias), this);
        }

        @Override
        public UserAdvancementsPath as(Name alias) {
            return new UserAdvancementsPath(alias, this);
        }

        @Override
        public UserAdvancementsPath as(Table<?> alias) {
            return new UserAdvancementsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserAdvancementsRecord, Long> getIdentity() {
        return (Identity<UserAdvancementsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserAdvancementsRecord> getPrimaryKey() {
        return Keys.USER_ADVANCEMENT_PKEY;
    }

    @Override
    public List<ForeignKey<UserAdvancementsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_EXERCISE_ID_FKEY, Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_ID_FKEY);
    }

    private transient ExercisesPath _exercises;

    /**
     * Get the implicit join path to the <code>public.exercises</code> table.
     */
    public ExercisesPath exercises() {
        if (_exercises == null)
            _exercises = new ExercisesPath(this, Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_EXERCISE_ID_FKEY, null);

        return _exercises;
    }

    private transient UserAcountsPath _userAcounts;

    /**
     * Get the implicit join path to the <code>public.user_acounts</code> table.
     */
    public UserAcountsPath userAcounts() {
        if (_userAcounts == null)
            _userAcounts = new UserAcountsPath(this, Keys.USER_ADVANCEMENTS__USER_ADVANCEMENTS_ID_FKEY, null);

        return _userAcounts;
    }

    @Override
    public UserAdvancements as(String alias) {
        return new UserAdvancements(DSL.name(alias), this);
    }

    @Override
    public UserAdvancements as(Name alias) {
        return new UserAdvancements(alias, this);
    }

    @Override
    public UserAdvancements as(Table<?> alias) {
        return new UserAdvancements(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAdvancements rename(String name) {
        return new UserAdvancements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAdvancements rename(Name name) {
        return new UserAdvancements(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAdvancements rename(Table<?> name) {
        return new UserAdvancements(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements where(Condition condition) {
        return new UserAdvancements(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAdvancements where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAdvancements where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAdvancements where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAdvancements where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAdvancements whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
